name: Flutter Android Build & Release

# Configure the events that trigger this workflow
on:
  push:
    branches:
      - main
      - master
  tags:
    - 'v*'  # Triggers the workflow when a new tag like 'v1.0.0' is pushed.

jobs:
  # The 'build' job handles building the Flutter application
  build:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    # Specify the container image to use, which comes with Flutter pre-installed
    container: ghcr.io/cirruslabs/flutter:stable

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Cache Flutter dependencies to speed up builds
      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            build/
          # The cache key is based on the OS and the pubspec.lock file
          key: ${{ runner.os }}-pub-${{ hashFiles('pubspec.lock') }}
          # Use restore-keys to find a compatible cache if an exact match isn't found
          restore-keys: ${{ runner.os }}-pub-

      # Step 3: Cache Gradle dependencies for faster Android builds
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # The key is based on the OS and Gradle configuration files
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # Step 4: Install Flutter dependencies
      - name: Get Flutter dependencies
        run: flutter pub get

      # Step 5: Build the Android release APK
      - name: Build Android Release APK
        run: flutter build apk --release

      # New Step: Rename the APK file to include the repository name
      - name: Rename APK file
        run: |
          # The repository name is retrieved from the GitHub context variable
          REPO_NAME="${{ github.event.repository.name }}"
          # The 'mv' command moves (renames) the file
          mv build/app/outputs/flutter-apk/app-release.apk "build/app/outputs/flutter-apk/$REPO_NAME.apk"

      # Step 6: Upload the generated APK as a workflow artifact
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          # The path now points to the renamed file
          path: build/app/outputs/flutter-apk/${{ github.event.repository.name }}.apk

  # The 'release' job creates a GitHub Release and uploads the artifact
  release:
    # This job depends on the 'build' job completing successfully
    needs: build
    runs-on: ubuntu-latest
    # This conditional ensures the job only runs when a new tag is pushed
    if: startsWith(github.ref, 'refs/tags/')

    steps:
      # Step 1: Download the APK artifact from the 'build' job
      - name: Download APK artifact
        uses: actions/download-artifact@v4
        with:
          name: app-release-apk
          path: ./release

      # New Step: Read the contents of the RELEASE_NOTES.md file
      # This step is now optional and won't fail if the file is missing
      - name: Read release notes
        id: release_notes_step
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let notes = '';
            try {
              notes = fs.readFileSync('RELEASE_NOTES.md', 'utf8');
            } catch (error) {
              // If the file does not exist, an error will be thrown.
              // We catch it and set the notes to an empty string.
              console.log('RELEASE_NOTES.md not found, proceeding without release notes.');
            }
            core.setOutput('notes', notes);

      # Step 2: Create a new GitHub Release and attach the APK
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          # Use the tag name as the release tag and name
          tag_name: ${{ github.ref_name }}
          name: "Release ${{ github.ref_name }}"
          # Specify the file to be uploaded to the release
          files: ./release/${{ github.event.repository.name }}.apk
          # Add the release notes from the previous step's output
          body: ${{ steps.release_notes_step.outputs.notes }}
        env:
          # Use the GITHUB_TOKEN to authenticate with the GitHub API
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
